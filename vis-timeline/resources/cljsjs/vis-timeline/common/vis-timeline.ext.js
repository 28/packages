/**********************************************************************
 * Extern for vis
 * Generated by http://jmmk.github.io/javascript-externs-generator
 **********************************************************************/
var vis = {
  "DOMutil": {
    "cleanupElements": function () {},
    "drawBar": function () {},
    "drawPoint": function () {},
    "getDOMElement": function () {},
    "getNavigatorLanguage": function () {},
    "getSVGElement": function () {},
    "prepareElements": function () {},
    "resetElements": function () {}
  },
  "DataSet": function () {},
  "DataView": function () {},
  "Graph2d": function () {},
  "Hammer": {
    "AttrRecognizer": function () {},
    "DIRECTION_ALL": {},
    "DIRECTION_DOWN": {},
    "DIRECTION_HORIZONTAL": {},
    "DIRECTION_LEFT": {},
    "DIRECTION_NONE": {},
    "DIRECTION_RIGHT": {},
    "DIRECTION_UP": {},
    "DIRECTION_VERTICAL": {},
    "INPUT_CANCEL": {},
    "INPUT_END": {},
    "INPUT_MOVE": {},
    "INPUT_START": {},
    "Input": function () {},
    "Manager": function () {},
    "MouseInput": function () {},
    "Pan": function () {},
    "Pinch": function () {},
    "PointerEventInput": function () {},
    "Press": function () {},
    "Recognizer": function () {},
    "Rotate": function () {},
    "STATE_BEGAN": {},
    "STATE_CANCELLED": {},
    "STATE_CHANGED": {},
    "STATE_ENDED": {},
    "STATE_FAILED": {},
    "STATE_POSSIBLE": {},
    "STATE_RECOGNIZED": {},
    "SingleTouchInput": function () {},
    "Swipe": function () {},
    "Tap": function () {},
    "TouchAction": function () {},
    "TouchInput": function () {},
    "TouchMouseInput": function () {},
    "VERSION": {},
    "addEventListeners": function () {},
    "assign": function () {},
    "bindFn": function () {},
    "boolOrFn": function () {},
    "defaults": {
      "cssProps": {
        "contentZooming": {},
        "tapHighlightColor": {},
        "touchCallout": {},
        "touchSelect": {},
        "userDrag": {},
        "userSelect": {}
      },
      "domEvents": {},
      "enable": {},
      "inputClass": {},
      "inputTarget": {},
      "preset": {},
      "touchAction": {}
    },
    "each": function () {},
    "extend": function () {},
    "hasParent": function () {},
    "inArray": function () {},
    "inherit": function () {},
    "merge": function () {},
    "off": function () {},
    "on": function () {},
    "prefixed": function () {},
    "removeEventListeners": function () {},
    "splitStr": function () {},
    "toArray": function () {},
    "uniqueArray": function () {}
  },
  "Queue": function () {},
  "Timeline": function () {},
  "default": {
    "DOMutil": {
      "cleanupElements": function () {},
      "drawBar": function () {},
      "drawPoint": function () {},
      "getDOMElement": function () {},
      "getNavigatorLanguage": function () {},
      "getSVGElement": function () {},
      "prepareElements": function () {},
      "resetElements": function () {}
    },
    "DataSet": function () {},
    "DataView": function () {},
    "Graph2d": function () {},
    "Hammer": {
      "AttrRecognizer": function () {},
      "DIRECTION_ALL": {},
      "DIRECTION_DOWN": {},
      "DIRECTION_HORIZONTAL": {},
      "DIRECTION_LEFT": {},
      "DIRECTION_NONE": {},
      "DIRECTION_RIGHT": {},
      "DIRECTION_UP": {},
      "DIRECTION_VERTICAL": {},
      "INPUT_CANCEL": {},
      "INPUT_END": {},
      "INPUT_MOVE": {},
      "INPUT_START": {},
      "Input": function () {},
      "Manager": function () {},
      "MouseInput": function () {},
      "Pan": function () {},
      "Pinch": function () {},
      "PointerEventInput": function () {},
      "Press": function () {},
      "Recognizer": function () {},
      "Rotate": function () {},
      "STATE_BEGAN": {},
      "STATE_CANCELLED": {},
      "STATE_CHANGED": {},
      "STATE_ENDED": {},
      "STATE_FAILED": {},
      "STATE_POSSIBLE": {},
      "STATE_RECOGNIZED": {},
      "SingleTouchInput": function () {},
      "Swipe": function () {},
      "Tap": function () {},
      "TouchAction": function () {},
      "TouchInput": function () {},
      "TouchMouseInput": function () {},
      "VERSION": {},
      "addEventListeners": function () {},
      "assign": function () {},
      "bindFn": function () {},
      "boolOrFn": function () {},
      "defaults": {
        "cssProps": {
          "contentZooming": {},
          "tapHighlightColor": {},
          "touchCallout": {},
          "touchSelect": {},
          "userDrag": {},
          "userSelect": {}
        },
        "domEvents": {},
        "enable": {},
        "inputClass": {},
        "inputTarget": {},
        "preset": {},
        "touchAction": {}
      },
      "each": function () {},
      "extend": function () {},
      "hasParent": function () {},
      "inArray": function () {},
      "inherit": function () {},
      "merge": function () {},
      "off": function () {},
      "on": function () {},
      "prefixed": function () {},
      "removeEventListeners": function () {},
      "splitStr": function () {},
      "toArray": function () {},
      "uniqueArray": function () {}
    },
    "Queue": function () {},
    "Timeline": function () {},
    "keycharm": function () {},
    "moment": {
      "HTML5_FMT": {
        "DATE": {},
        "DATETIME_LOCAL": {},
        "DATETIME_LOCAL_MS": {},
        "DATETIME_LOCAL_SECONDS": {},
        "MONTH": {},
        "TIME": {},
        "TIME_MS": {},
        "TIME_SECONDS": {},
        "WEEK": {}
      },
      "ISO_8601": function () {},
      "RFC_2822": function () {},
      "calendarFormat": function () {},
      "createFromInputFallback": function () {},
      "defaultFormat": {},
      "defaultFormatUtc": {},
      "defineLocale": function () {},
      "deprecationHandler": {},
      "duration": {
        "fn": {
          "_bubble": function () {},
          "abs": function () {},
          "add": function () {},
          "as": function () {},
          "asDays": function () {},
          "asHours": function () {},
          "asMilliseconds": function () {},
          "asMinutes": function () {},
          "asMonths": function () {},
          "asQuarters": function () {},
          "asSeconds": function () {},
          "asWeeks": function () {},
          "asYears": function () {},
          "clone": function () {},
          "days": function () {},
          "get": function () {},
          "hours": function () {},
          "humanize": function () {},
          "isValid": function () {},
          "lang": function () {},
          "locale": function () {},
          "localeData": function () {},
          "milliseconds": function () {},
          "minutes": function () {},
          "months": function () {},
          "seconds": function () {},
          "subtract": function () {},
          "toISOString": function () {},
          "toIsoString": function () {},
          "toJSON": function () {},
          "toString": function () {},
          "valueOf": function () {},
          "weeks": function () {},
          "years": function () {}
        },
        "invalid": function () {}
      },
      "fn": {
        "add": function () {},
        "calendar": function () {},
        "clone": function () {},
        "creationData": function () {},
        "date": function () {},
        "dates": function () {},
        "day": function () {},
        "dayOfYear": function () {},
        "days": function () {},
        "daysInMonth": function () {},
        "diff": function () {},
        "endOf": function () {},
        "format": function () {},
        "from": function () {},
        "fromNow": function () {},
        "get": function () {},
        "hasAlignedHourOffset": function () {},
        "hour": function () {},
        "hours": function () {},
        "inspect": function () {},
        "invalidAt": function () {},
        "isAfter": function () {},
        "isBefore": function () {},
        "isBetween": function () {},
        "isDST": function () {},
        "isDSTShifted": function () {},
        "isLeapYear": function () {},
        "isLocal": function () {},
        "isSame": function () {},
        "isSameOrAfter": function () {},
        "isSameOrBefore": function () {},
        "isUTC": function () {},
        "isUtc": function () {},
        "isUtcOffset": function () {},
        "isValid": function () {},
        "isoWeek": function () {},
        "isoWeekYear": function () {},
        "isoWeekday": function () {},
        "isoWeeks": function () {},
        "isoWeeksInYear": function () {},
        "lang": function () {},
        "local": function () {},
        "locale": function () {},
        "localeData": function () {},
        "max": function () {},
        "millisecond": function () {},
        "milliseconds": function () {},
        "min": function () {},
        "minute": function () {},
        "minutes": function () {},
        "month": function () {},
        "months": function () {},
        "parseZone": function () {},
        "parsingFlags": function () {},
        "quarter": function () {},
        "quarters": function () {},
        "second": function () {},
        "seconds": function () {},
        "set": function () {},
        "startOf": function () {},
        "subtract": function () {},
        "to": function () {},
        "toArray": function () {},
        "toDate": function () {},
        "toISOString": function () {},
        "toJSON": function () {},
        "toNow": function () {},
        "toObject": function () {},
        "toString": function () {},
        "unix": function () {},
        "utc": function () {},
        "utcOffset": function () {},
        "valueOf": function () {},
        "week": function () {},
        "weekYear": function () {},
        "weekday": function () {},
        "weeks": function () {},
        "weeksInYear": function () {},
        "year": function () {},
        "years": function () {},
        "zone": function () {},
        "zoneAbbr": function () {},
        "zoneName": function () {}
      },
      "invalid": function () {},
      "isDate": function () {},
      "isDuration": function () {},
      "isMoment": function () {},
      "lang": function () {},
      "langData": function () {},
      "locale": function () {},
      "localeData": function () {},
      "locales": function () {},
      "max": function () {},
      "min": function () {},
      "momentProperties": {},
      "months": function () {},
      "monthsShort": function () {},
      "normalizeUnits": function () {},
      "now": function () {},
      "parseTwoDigitYear": function () {},
      "parseZone": function () {},
      "relativeTimeRounding": function () {},
      "relativeTimeThreshold": function () {},
      "suppressDeprecationWarnings": {},
      "unix": function () {},
      "updateLocale": function () {},
      "updateOffset": function () {},
      "utc": function () {},
      "version": {},
      "weekdays": function () {},
      "weekdaysMin": function () {},
      "weekdaysShort": function () {}
    },
    "timeline": {
      "Core": function () {},
      "DateUtil": {
        "convertHiddenOptions": function () {},
        "correctTimeForHidden": function () {},
        "getAccumulatedHiddenDuration": function () {},
        "getHiddenDurationBefore": function () {},
        "getHiddenDurationBeforeStart": function () {},
        "getHiddenDurationBetween": function () {},
        "getIsHidden": function () {},
        "printDates": function () {},
        "removeDuplicates": function () {},
        "snapAwayFromHidden": function () {},
        "stepOverHiddenDates": function () {},
        "toScreen": function () {},
        "toTime": function () {},
        "updateHiddenDates": function () {}
      },
      "Range": function () {},
      "TimeStep": {
        "FORMAT": {
          "majorLabels": {
            "day": {},
            "hour": {},
            "millisecond": {},
            "minute": {},
            "month": {},
            "second": {},
            "week": {},
            "weekday": {},
            "year": {}
          },
          "minorLabels": {
            "day": {},
            "hour": {},
            "millisecond": {},
            "minute": {},
            "month": {},
            "second": {},
            "week": {},
            "weekday": {},
            "year": {}
          }
        }
      },
      "components": {
        "BackgroundGroup": function () {},
        "Component": function () {},
        "CurrentTime": function () {},
        "CustomTime": function () {},
        "DataAxis": function () {},
        "DataScale": function () {},
        "GraphGroup": function () {},
        "Group": function () {},
        "ItemSet": {
          "types": {
            "background": function () {},
            "box": function () {},
            "point": function () {},
            "range": function () {}
          }
        },
        "Legend": function () {},
        "LineGraph": function () {},
        "TimeAxis": function () {},
        "items": {
          "BackgroundItem": function () {},
          "BoxItem": function () {},
          "Item": function () {},
          "PointItem": function () {},
          "RangeItem": function () {}
        }
      },
      "stack": {
        "collision": function () {},
        "collisionByTimes": function () {},
        "nostack": function () {},
        "orderByEnd": function () {},
        "orderByStart": function () {},
        "stack": function () {},
        "stackSubgroups": function () {},
        "stackSubgroupsWithInnerStack": function () {},
        "substack": function () {}
      }
    },
    "util": {
      "HSVToHex": function () {},
      "HSVToRGB": function () {},
      "RGBToHSV": function () {},
      "RGBToHex": function () {},
      "addClassName": function () {},
      "addCssText": function () {},
      "addEventListener": function () {},
      "binarySearchCustom": function () {},
      "binarySearchValue": function () {},
      "bridgeObject": function () {},
      "convert": function () {},
      "copyAndExtendArray": function () {},
      "copyArray": function () {},
      "deepExtend": function () {},
      "easingFunctions": {
        "easeInCubic": function () {},
        "easeInOutCubic": function () {},
        "easeInOutQuad": function () {},
        "easeInOutQuart": function () {},
        "easeInOutQuint": function () {},
        "easeInQuad": function () {},
        "easeInQuart": function () {},
        "easeInQuint": function () {},
        "easeOutCubic": function () {},
        "easeOutQuad": function () {},
        "easeOutQuart": function () {},
        "easeOutQuint": function () {},
        "linear": function () {}
      },
      "equalArray": function () {},
      "extend": function () {},
      "fillIfDefined": function () {},
      "forEach": function () {},
      "getAbsoluteLeft": function () {},
      "getAbsoluteRight": function () {},
      "getAbsoluteTop": function () {},
      "getScrollBarWidth": function () {},
      "getTarget": function () {},
      "getType": function () {},
      "hasParent": function () {},
      "hexToHSV": function () {},
      "hexToRGB": function () {},
      "insertSort": function () {},
      "isDate": function () {},
      "isMoment": function () {},
      "isNumber": function () {},
      "isObject": function () {},
      "isString": function () {},
      "isValidHex": function () {},
      "isValidRGB": function () {},
      "isValidRGBA": function () {},
      "mergeOptions": function () {},
      "option": {
        "asBoolean": function () {},
        "asElement": function () {},
        "asNumber": function () {},
        "asSize": function () {},
        "asString": function () {}
      },
      "overrideOpacity": function () {},
      "parseColor": function () {},
      "preventDefault": function () {},
      "randomUUID": function () {},
      "recursiveDOMDelete": function () {},
      "removeClassName": function () {},
      "removeCssText": function () {},
      "removeEventListener": function () {},
      "selectiveBridgeObject": function () {},
      "selectiveDeepExtend": function () {},
      "selectiveExtend": function () {},
      "selectiveNotDeepExtend": function () {},
      "throttle": function () {},
      "toArray": function () {},
      "topMost": function () {},
      "updateProperty": function () {}
    }
  },
  "keycharm": function () {},
  "moment": {
    "HTML5_FMT": {
      "DATE": {},
      "DATETIME_LOCAL": {},
      "DATETIME_LOCAL_MS": {},
      "DATETIME_LOCAL_SECONDS": {},
      "MONTH": {},
      "TIME": {},
      "TIME_MS": {},
      "TIME_SECONDS": {},
      "WEEK": {}
    },
    "ISO_8601": function () {},
    "RFC_2822": function () {},
    "calendarFormat": function () {},
    "createFromInputFallback": function () {},
    "defaultFormat": {},
    "defaultFormatUtc": {},
    "defineLocale": function () {},
    "deprecationHandler": {},
    "duration": {
      "fn": {
        "_bubble": function () {},
        "abs": function () {},
        "add": function () {},
        "as": function () {},
        "asDays": function () {},
        "asHours": function () {},
        "asMilliseconds": function () {},
        "asMinutes": function () {},
        "asMonths": function () {},
        "asQuarters": function () {},
        "asSeconds": function () {},
        "asWeeks": function () {},
        "asYears": function () {},
        "clone": function () {},
        "days": function () {},
        "get": function () {},
        "hours": function () {},
        "humanize": function () {},
        "isValid": function () {},
        "lang": function () {},
        "locale": function () {},
        "localeData": function () {},
        "milliseconds": function () {},
        "minutes": function () {},
        "months": function () {},
        "seconds": function () {},
        "subtract": function () {},
        "toISOString": function () {},
        "toIsoString": function () {},
        "toJSON": function () {},
        "toString": function () {},
        "valueOf": function () {},
        "weeks": function () {},
        "years": function () {}
      },
      "invalid": function () {}
    },
    "fn": {
      "add": function () {},
      "calendar": function () {},
      "clone": function () {},
      "creationData": function () {},
      "date": function () {},
      "dates": function () {},
      "day": function () {},
      "dayOfYear": function () {},
      "days": function () {},
      "daysInMonth": function () {},
      "diff": function () {},
      "endOf": function () {},
      "format": function () {},
      "from": function () {},
      "fromNow": function () {},
      "get": function () {},
      "hasAlignedHourOffset": function () {},
      "hour": function () {},
      "hours": function () {},
      "inspect": function () {},
      "invalidAt": function () {},
      "isAfter": function () {},
      "isBefore": function () {},
      "isBetween": function () {},
      "isDST": function () {},
      "isDSTShifted": function () {},
      "isLeapYear": function () {},
      "isLocal": function () {},
      "isSame": function () {},
      "isSameOrAfter": function () {},
      "isSameOrBefore": function () {},
      "isUTC": function () {},
      "isUtc": function () {},
      "isUtcOffset": function () {},
      "isValid": function () {},
      "isoWeek": function () {},
      "isoWeekYear": function () {},
      "isoWeekday": function () {},
      "isoWeeks": function () {},
      "isoWeeksInYear": function () {},
      "lang": function () {},
      "local": function () {},
      "locale": function () {},
      "localeData": function () {},
      "max": function () {},
      "millisecond": function () {},
      "milliseconds": function () {},
      "min": function () {},
      "minute": function () {},
      "minutes": function () {},
      "month": function () {},
      "months": function () {},
      "parseZone": function () {},
      "parsingFlags": function () {},
      "quarter": function () {},
      "quarters": function () {},
      "second": function () {},
      "seconds": function () {},
      "set": function () {},
      "startOf": function () {},
      "subtract": function () {},
      "to": function () {},
      "toArray": function () {},
      "toDate": function () {},
      "toISOString": function () {},
      "toJSON": function () {},
      "toNow": function () {},
      "toObject": function () {},
      "toString": function () {},
      "unix": function () {},
      "utc": function () {},
      "utcOffset": function () {},
      "valueOf": function () {},
      "week": function () {},
      "weekYear": function () {},
      "weekday": function () {},
      "weeks": function () {},
      "weeksInYear": function () {},
      "year": function () {},
      "years": function () {},
      "zone": function () {},
      "zoneAbbr": function () {},
      "zoneName": function () {}
    },
    "invalid": function () {},
    "isDate": function () {},
    "isDuration": function () {},
    "isMoment": function () {},
    "lang": function () {},
    "langData": function () {},
    "locale": function () {},
    "localeData": function () {},
    "locales": function () {},
    "max": function () {},
    "min": function () {},
    "momentProperties": {},
    "months": function () {},
    "monthsShort": function () {},
    "normalizeUnits": function () {},
    "now": function () {},
    "parseTwoDigitYear": function () {},
    "parseZone": function () {},
    "relativeTimeRounding": function () {},
    "relativeTimeThreshold": function () {},
    "suppressDeprecationWarnings": {},
    "unix": function () {},
    "updateLocale": function () {},
    "updateOffset": function () {},
    "utc": function () {},
    "version": {},
    "weekdays": function () {},
    "weekdaysMin": function () {},
    "weekdaysShort": function () {}
  },
  "timeline": {
    "Core": function () {},
    "DateUtil": {
      "convertHiddenOptions": function () {},
      "correctTimeForHidden": function () {},
      "getAccumulatedHiddenDuration": function () {},
      "getHiddenDurationBefore": function () {},
      "getHiddenDurationBeforeStart": function () {},
      "getHiddenDurationBetween": function () {},
      "getIsHidden": function () {},
      "printDates": function () {},
      "removeDuplicates": function () {},
      "snapAwayFromHidden": function () {},
      "stepOverHiddenDates": function () {},
      "toScreen": function () {},
      "toTime": function () {},
      "updateHiddenDates": function () {}
    },
    "Range": function () {},
    "TimeStep": {
      "FORMAT": {
        "majorLabels": {
          "day": {},
          "hour": {},
          "millisecond": {},
          "minute": {},
          "month": {},
          "second": {},
          "week": {},
          "weekday": {},
          "year": {}
        },
        "minorLabels": {
          "day": {},
          "hour": {},
          "millisecond": {},
          "minute": {},
          "month": {},
          "second": {},
          "week": {},
          "weekday": {},
          "year": {}
        }
      }
    },
    "components": {
      "BackgroundGroup": function () {},
      "Component": function () {},
      "CurrentTime": function () {},
      "CustomTime": function () {},
      "DataAxis": function () {},
      "DataScale": function () {},
      "GraphGroup": function () {},
      "Group": function () {},
      "ItemSet": {
        "types": {
          "background": function () {},
          "box": function () {},
          "point": function () {},
          "range": function () {}
        }
      },
      "Legend": function () {},
      "LineGraph": function () {},
      "TimeAxis": function () {},
      "items": {
        "BackgroundItem": function () {},
        "BoxItem": function () {},
        "Item": function () {},
        "PointItem": function () {},
        "RangeItem": function () {}
      }
    },
    "stack": {
      "collision": function () {},
      "collisionByTimes": function () {},
      "nostack": function () {},
      "orderByEnd": function () {},
      "orderByStart": function () {},
      "stack": function () {},
      "stackSubgroups": function () {},
      "stackSubgroupsWithInnerStack": function () {},
      "substack": function () {}
    }
  },
  "util": {
    "HSVToHex": function () {},
    "HSVToRGB": function () {},
    "RGBToHSV": function () {},
    "RGBToHex": function () {},
    "addClassName": function () {},
    "addCssText": function () {},
    "addEventListener": function () {},
    "binarySearchCustom": function () {},
    "binarySearchValue": function () {},
    "bridgeObject": function () {},
    "convert": function () {},
    "copyAndExtendArray": function () {},
    "copyArray": function () {},
    "deepExtend": function () {},
    "easingFunctions": {
      "easeInCubic": function () {},
      "easeInOutCubic": function () {},
      "easeInOutQuad": function () {},
      "easeInOutQuart": function () {},
      "easeInOutQuint": function () {},
      "easeInQuad": function () {},
      "easeInQuart": function () {},
      "easeInQuint": function () {},
      "easeOutCubic": function () {},
      "easeOutQuad": function () {},
      "easeOutQuart": function () {},
      "easeOutQuint": function () {},
      "linear": function () {}
    },
    "equalArray": function () {},
    "extend": function () {},
    "fillIfDefined": function () {},
    "forEach": function () {},
    "getAbsoluteLeft": function () {},
    "getAbsoluteRight": function () {},
    "getAbsoluteTop": function () {},
    "getScrollBarWidth": function () {},
    "getTarget": function () {},
    "getType": function () {},
    "hasParent": function () {},
    "hexToHSV": function () {},
    "hexToRGB": function () {},
    "insertSort": function () {},
    "isDate": function () {},
    "isMoment": function () {},
    "isNumber": function () {},
    "isObject": function () {},
    "isString": function () {},
    "isValidHex": function () {},
    "isValidRGB": function () {},
    "isValidRGBA": function () {},
    "mergeOptions": function () {},
    "option": {
      "asBoolean": function () {},
      "asElement": function () {},
      "asNumber": function () {},
      "asSize": function () {},
      "asString": function () {}
    },
    "overrideOpacity": function () {},
    "parseColor": function () {},
    "preventDefault": function () {},
    "randomUUID": function () {},
    "recursiveDOMDelete": function () {},
    "removeClassName": function () {},
    "removeCssText": function () {},
    "removeEventListener": function () {},
    "selectiveBridgeObject": function () {},
    "selectiveDeepExtend": function () {},
    "selectiveExtend": function () {},
    "selectiveNotDeepExtend": function () {},
    "throttle": function () {},
    "toArray": function () {},
    "topMost": function () {},
    "updateProperty": function () {}
  }
};
vis.Graph2d.prototype = {
  "_createConfigurator": function () {},
  "addEventListener": function () {},
  "emit": function () {},
  "getDataRange": function () {},
  "getEventProperties": function () {},
  "getLegend": function () {},
  "hasListeners": function () {},
  "isGroupVisible": function () {},
  "listeners": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeEventListener": function () {},
  "removeListener": function () {},
  "setGroups": function () {},
  "setItems": function () {},
  "setOptions": function () {}
};
vis.Hammer.AttrRecognizer.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.Input.prototype = {
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.Hammer.MouseInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.Hammer.Pan.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "directionTest": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.Pinch.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.PointerEventInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.Hammer.Press.prototype = {
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.Recognizer.prototype = {
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.Rotate.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.SingleTouchInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.Hammer.Swipe.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.Tap.prototype = {
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "failTimeout": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.Hammer.TouchAction.prototype = {
  "compute": function () {},
  "preventDefaults": function () {},
  "preventSrc": function () {},
  "set": function () {},
  "update": function () {}
};
vis.Hammer.TouchInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.Hammer.TouchMouseInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.Timeline.prototype = {
  "addEventListener": function () {},
  "emit": function () {},
  "hasListeners": function () {},
  "listeners": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeEventListener": function () {},
  "removeListener": function () {}
};
vis.default.Graph2d.prototype = {
  "_createConfigurator": function () {},
  "addEventListener": function () {},
  "emit": function () {},
  "getDataRange": function () {},
  "getEventProperties": function () {},
  "getLegend": function () {},
  "hasListeners": function () {},
  "isGroupVisible": function () {},
  "listeners": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeEventListener": function () {},
  "removeListener": function () {},
  "setGroups": function () {},
  "setItems": function () {},
  "setOptions": function () {}
};
vis.default.Hammer.AttrRecognizer.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.Input.prototype = {
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.default.Hammer.MouseInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.default.Hammer.Pan.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "directionTest": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.Pinch.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.PointerEventInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.default.Hammer.Press.prototype = {
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.Recognizer.prototype = {
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.Rotate.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.SingleTouchInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.default.Hammer.Swipe.prototype = {
  "attrTest": function () {},
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.Tap.prototype = {
  "canEmit": function () {},
  "canRecognizeWith": function () {},
  "constructor": function () {},
  "dropRecognizeWith": function () {},
  "dropRequireFailure": function () {},
  "emit": function () {},
  "failTimeout": function () {},
  "getTouchAction": function () {},
  "hasRequireFailures": function () {},
  "process": function () {},
  "recognize": function () {},
  "recognizeWith": function () {},
  "requireFailure": function () {},
  "reset": function () {},
  "set": function () {},
  "tryEmit": function () {}
};
vis.default.Hammer.TouchAction.prototype = {
  "compute": function () {},
  "preventDefaults": function () {},
  "preventSrc": function () {},
  "set": function () {},
  "update": function () {}
};
vis.default.Hammer.TouchInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.default.Hammer.TouchMouseInput.prototype = {
  "constructor": function () {},
  "destroy": function () {},
  "handler": function () {},
  "init": function () {}
};
vis.default.Timeline.prototype = {
  "addEventListener": function () {},
  "emit": function () {},
  "hasListeners": function () {},
  "listeners": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeEventListener": function () {},
  "removeListener": function () {}
};
vis.default.moment.prototype = {
  "add": function () {},
  "calendar": function () {},
  "clone": function () {},
  "creationData": function () {},
  "date": function () {},
  "dates": function () {},
  "day": function () {},
  "dayOfYear": function () {},
  "days": function () {},
  "daysInMonth": function () {},
  "diff": function () {},
  "endOf": function () {},
  "format": function () {},
  "from": function () {},
  "fromNow": function () {},
  "get": function () {},
  "hasAlignedHourOffset": function () {},
  "hour": function () {},
  "hours": function () {},
  "inspect": function () {},
  "invalidAt": function () {},
  "isAfter": function () {},
  "isBefore": function () {},
  "isBetween": function () {},
  "isDST": function () {},
  "isDSTShifted": function () {},
  "isLeapYear": function () {},
  "isLocal": function () {},
  "isSame": function () {},
  "isSameOrAfter": function () {},
  "isSameOrBefore": function () {},
  "isUTC": function () {},
  "isUtc": function () {},
  "isUtcOffset": function () {},
  "isValid": function () {},
  "isoWeek": function () {},
  "isoWeekYear": function () {},
  "isoWeekday": function () {},
  "isoWeeks": function () {},
  "isoWeeksInYear": function () {},
  "lang": function () {},
  "local": function () {},
  "locale": function () {},
  "localeData": function () {},
  "max": function () {},
  "millisecond": function () {},
  "milliseconds": function () {},
  "min": function () {},
  "minute": function () {},
  "minutes": function () {},
  "month": function () {},
  "months": function () {},
  "parseZone": function () {},
  "parsingFlags": function () {},
  "quarter": function () {},
  "quarters": function () {},
  "second": function () {},
  "seconds": function () {},
  "set": function () {},
  "startOf": function () {},
  "subtract": function () {},
  "to": function () {},
  "toArray": function () {},
  "toDate": function () {},
  "toISOString": function () {},
  "toJSON": function () {},
  "toNow": function () {},
  "toObject": function () {},
  "toString": function () {},
  "unix": function () {},
  "utc": function () {},
  "utcOffset": function () {},
  "valueOf": function () {},
  "week": function () {},
  "weekYear": function () {},
  "weekday": function () {},
  "weeks": function () {},
  "weeksInYear": function () {},
  "year": function () {},
  "years": function () {},
  "zone": function () {},
  "zoneAbbr": function () {},
  "zoneName": function () {}
};
vis.default.timeline.Core.prototype = {
  "addEventListener": function () {},
  "emit": function () {},
  "hasListeners": function () {},
  "listeners": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeEventListener": function () {},
  "removeListener": function () {}
};
vis.default.timeline.components.GraphGroup.prototype = {
  "getItems": function () {},
  "getLegend": function () {},
  "getYRange": function () {},
  "setItems": function () {},
  "setOptions": function () {},
  "setZeroPosition": function () {},
  "update": function () {}
};
vis.default.timeline.components.ItemSet.prototype = {
  "_onAdd": function () {}
};
vis.default.timeline.components.ItemSet.types.background.prototype = {
  "baseClassName": function () {},
  "hide": function () {},
  "repositionX": function () {},
  "show": function () {},
  "stack": function () {}
};
vis.default.timeline.components.ItemSet.types.box.prototype = {
  "stack": function () {}
};
vis.default.timeline.components.ItemSet.types.point.prototype = {
  "stack": function () {}
};
vis.default.timeline.components.ItemSet.types.range.prototype = {
  "baseClassName": function () {},
  "stack": function () {}
};
vis.default.timeline.components.Legend.prototype = {
  "_create": function () {},
  "addGroup": function () {},
  "clear": function () {},
  "drawLegendIcons": function () {},
  "hide": function () {},
  "options": function () {},
  "props": function () {},
  "redraw": function () {},
  "removeGroup": function () {},
  "setOptions": function () {},
  "show": function () {},
  "updateGroup": function () {}
};
vis.default.timeline.components.LineGraph.prototype = {
  "_applySampling": function () {},
  "_convertXcoordinates": function () {},
  "_convertYcoordinates": function () {},
  "_create": function () {},
  "_getRelevantData": function () {},
  "_getSortedGroupIds": function () {},
  "_getYRanges": function () {},
  "_onAdd": function () {},
  "_onAddGroups": function () {},
  "_onRemove": function () {},
  "_onRemoveGroups": function () {},
  "_onUpdate": function () {},
  "_onUpdateGroups": function () {},
  "_removeGroup": function () {},
  "_stack": function () {},
  "_toggleAxisVisiblity": function () {},
  "_updateAllGroupData": function () {},
  "_updateGraph": function () {},
  "_updateGroup": function () {},
  "_updateYAxis": function () {},
  "hide": function () {},
  "options": function () {},
  "props": function () {},
  "redraw": function () {},
  "setGroups": function () {},
  "setItems": function () {},
  "setOptions": function () {},
  "show": function () {}
};
vis.default.timeline.components.items.BackgroundItem.prototype = {
  "baseClassName": function () {},
  "hide": function () {},
  "repositionX": function () {},
  "show": function () {},
  "stack": function () {}
};
vis.default.timeline.components.items.BoxItem.prototype = {
  "stack": function () {}
};
vis.default.timeline.components.items.Item.prototype = {
  "stack": function () {}
};
vis.default.timeline.components.items.PointItem.prototype = {
  "stack": function () {}
};
vis.default.timeline.components.items.RangeItem.prototype = {
  "baseClassName": function () {},
  "stack": function () {}
};
vis.moment.prototype = {
  "add": function () {},
  "calendar": function () {},
  "clone": function () {},
  "creationData": function () {},
  "date": function () {},
  "dates": function () {},
  "day": function () {},
  "dayOfYear": function () {},
  "days": function () {},
  "daysInMonth": function () {},
  "diff": function () {},
  "endOf": function () {},
  "format": function () {},
  "from": function () {},
  "fromNow": function () {},
  "get": function () {},
  "hasAlignedHourOffset": function () {},
  "hour": function () {},
  "hours": function () {},
  "inspect": function () {},
  "invalidAt": function () {},
  "isAfter": function () {},
  "isBefore": function () {},
  "isBetween": function () {},
  "isDST": function () {},
  "isDSTShifted": function () {},
  "isLeapYear": function () {},
  "isLocal": function () {},
  "isSame": function () {},
  "isSameOrAfter": function () {},
  "isSameOrBefore": function () {},
  "isUTC": function () {},
  "isUtc": function () {},
  "isUtcOffset": function () {},
  "isValid": function () {},
  "isoWeek": function () {},
  "isoWeekYear": function () {},
  "isoWeekday": function () {},
  "isoWeeks": function () {},
  "isoWeeksInYear": function () {},
  "lang": function () {},
  "local": function () {},
  "locale": function () {},
  "localeData": function () {},
  "max": function () {},
  "millisecond": function () {},
  "milliseconds": function () {},
  "min": function () {},
  "minute": function () {},
  "minutes": function () {},
  "month": function () {},
  "months": function () {},
  "parseZone": function () {},
  "parsingFlags": function () {},
  "quarter": function () {},
  "quarters": function () {},
  "second": function () {},
  "seconds": function () {},
  "set": function () {},
  "startOf": function () {},
  "subtract": function () {},
  "to": function () {},
  "toArray": function () {},
  "toDate": function () {},
  "toISOString": function () {},
  "toJSON": function () {},
  "toNow": function () {},
  "toObject": function () {},
  "toString": function () {},
  "unix": function () {},
  "utc": function () {},
  "utcOffset": function () {},
  "valueOf": function () {},
  "week": function () {},
  "weekYear": function () {},
  "weekday": function () {},
  "weeks": function () {},
  "weeksInYear": function () {},
  "year": function () {},
  "years": function () {},
  "zone": function () {},
  "zoneAbbr": function () {},
  "zoneName": function () {}
};
vis.timeline.Core.prototype = {
  "addEventListener": function () {},
  "emit": function () {},
  "hasListeners": function () {},
  "listeners": function () {},
  "off": function () {},
  "on": function () {},
  "once": function () {},
  "removeAllListeners": function () {},
  "removeEventListener": function () {},
  "removeListener": function () {}
};
vis.timeline.components.GraphGroup.prototype = {
  "getItems": function () {},
  "getLegend": function () {},
  "getYRange": function () {},
  "setItems": function () {},
  "setOptions": function () {},
  "setZeroPosition": function () {},
  "update": function () {}
};
vis.timeline.components.ItemSet.prototype = {
  "_onAdd": function () {}
};
vis.timeline.components.ItemSet.types.background.prototype = {
  "baseClassName": function () {},
  "hide": function () {},
  "repositionX": function () {},
  "show": function () {},
  "stack": function () {}
};
vis.timeline.components.ItemSet.types.box.prototype = {
  "stack": function () {}
};
vis.timeline.components.ItemSet.types.point.prototype = {
  "stack": function () {}
};
vis.timeline.components.ItemSet.types.range.prototype = {
  "baseClassName": function () {},
  "stack": function () {}
};
vis.timeline.components.Legend.prototype = {
  "_create": function () {},
  "addGroup": function () {},
  "clear": function () {},
  "drawLegendIcons": function () {},
  "hide": function () {},
  "options": function () {},
  "props": function () {},
  "redraw": function () {},
  "removeGroup": function () {},
  "setOptions": function () {},
  "show": function () {},
  "updateGroup": function () {}
};
vis.timeline.components.LineGraph.prototype = {
  "_applySampling": function () {},
  "_convertXcoordinates": function () {},
  "_convertYcoordinates": function () {},
  "_create": function () {},
  "_getRelevantData": function () {},
  "_getSortedGroupIds": function () {},
  "_getYRanges": function () {},
  "_onAdd": function () {},
  "_onAddGroups": function () {},
  "_onRemove": function () {},
  "_onRemoveGroups": function () {},
  "_onUpdate": function () {},
  "_onUpdateGroups": function () {},
  "_removeGroup": function () {},
  "_stack": function () {},
  "_toggleAxisVisiblity": function () {},
  "_updateAllGroupData": function () {},
  "_updateGraph": function () {},
  "_updateGroup": function () {},
  "_updateYAxis": function () {},
  "hide": function () {},
  "options": function () {},
  "props": function () {},
  "redraw": function () {},
  "setGroups": function () {},
  "setItems": function () {},
  "setOptions": function () {},
  "show": function () {}
};
vis.timeline.components.items.BackgroundItem.prototype = {
  "baseClassName": function () {},
  "hide": function () {},
  "repositionX": function () {},
  "show": function () {},
  "stack": function () {}
};
vis.timeline.components.items.BoxItem.prototype = {
  "stack": function () {}
};
vis.timeline.components.items.Item.prototype = {
  "stack": function () {}
};
vis.timeline.components.items.PointItem.prototype = {
  "stack": function () {}
};
vis.timeline.components.items.RangeItem.prototype = {
  "baseClassName": function () {},
  "stack": function () {}
};
/**********************************************************************
 * End Generated Extern for vis
/**********************************************************************/